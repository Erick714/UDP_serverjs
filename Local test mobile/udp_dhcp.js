const dgram = require('dgram');
const server = dgram.createSocket('udp4');
var stdin = process.openStdin();

var ip ;
var port;
var ip_local ;
var port_local;

stdin.addListener("data", function(d) {
    // note:  d is an object, and when converted to a string it will
    // end with a linefeed.  so we (rather crudely) account for that
    // with toString() and then trim()
    var a = d.toString();
    if(a.indexOf("SEND DISCOVERY"  ) > -1 && ip != "")
	{
	 buf = new Buffer([
      0x01, 0x01, 0x06, 0x00,//settings
      0xaa, 0xaa, 0xaa, 0xaa,//ID
      0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00,//IP1-2
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//IP3-4
      0x00, 0x00, 0x00, 0x00,//IP 5
      0xee, 0xee, 0xee, 0xee, 0xee, 0xee, 0x00, 0x00,//MAC
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,//PADDING
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
      0x63, 0x82, 0x53, 0x63, //magic number
      0x35, 0x01, 0x01,//DHCP message type
    //  0x3d, 0x07, 0x01, 0xe0, 0xcb, 0x4e, 0x28, 0x0a, 0x80,
      0x32, 0x04, 0xc0, 0xa8, 0x00, 0xf5,//requested ip
    //  0x0c, 0x0b, 0x4a, 0x75, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x73, 0x2d, 0x77, 0x37,
    //  0x3c, 0x08, 0x4d, 0x53, 0x46, 0x54, 0x20, 0x35, 0x2e, 0x30,
    //  0x37, 0x0c, 0x01, 0x0f, 0x03, 0x06, 0x2c, 0x2e, 0x2f, 0x1f, 0x21, 0x79, 0xf9, 0x2b,
      0x37, 0x04, 0x01, 0x15, 0x03, 0x06,//requested options
      0xff,//ending
      0x00, 0x00, 0x00, 0x00
   ]);
            server.send(buf, 67,"255.255.255.255");
           }
    else   if(a.indexOf("SEND REQUEST"  ) > -1 && ip != "")
  	{
            buf=new Buffer("01010600aaaaaaaa0000800000000000000000000000000000000000eeeeeeeeeeee00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000638253633501013204c0a80064370401150306ff00000000","hex");
                   server.send(buf.toString("hex"), 67,"255.255.255.255");
                  }

    else if( a.indexOf("eee") >- 1)
      {
        server.close();
      }
    else
      {
        server.send(a.trim(), 444,"89.249.82.106");
        console.log("you entered: [" +a.trim() + "]");
      }

  });
//server.send(msg, rinfo.port, rinfo.address);
server.on('error', (err) => {
  console.log(`server error:\n${err.stack}`);
  server.close();
});

server.on('message', (msg, rinfo) => {
  if(rinfo.address == "89.249.82.106" )
  {
    if(msg.indexOf("connection")> -1)
    {
      var obj = JSON.parse(msg);
          var array = Object.keys(obj)
          ip = obj[array[1]].ip;
          port = obj[array[1]].port;
     console.log(obj[array[1]].ip+":"+obj[array[1]].port);

  }}
  else if(rinfo.address == "192.168.0.100" )
  {
    if(msg.indexOf("connection")> -1)
    {
      var obj = JSON.parse(msg);
          var array = Object.keys(obj)
          ip = obj[array[1]].ip;
          port = obj[array[1]].port;
     console.log(obj[array[1]].ip_local+":"+obj[array[1]].port_local);

  }}
	buf= Buffer.from(msg);
	var fs = require('fs');

fs.appendFile('test.txt', msg.toString('hex'),function (err) {
  if (err) throw err;
  console.log('Saved!');
});
console.log("The file was saved!");
var id = new Buffer([0xaa,0xaa,0xaa,0xaa]);
if(msg.slice(4,8).toString('hex') == ip )
{
  console.log("succsses");
}




console.log(`server got: ${buf.toString('hex')} from ${rinfo.address}:${rinfo.port}`);
});

server.on('listening', () => {
  const address = server.address();
  console.log(`server listening ${address.address}:${address.port}\r\n`);
});

server.bind({
     address: '0.0.0.0',
      port: 68,
     exclusive: true
});
